package chaos.alice.pro.ui.chat

import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.combinedClickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.automirrored.filled.Send
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.navigation.NavController
import chaos.alice.pro.data.local.MessageEntity
import chaos.alice.pro.data.local.Sender
import coil.compose.AsyncImage
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.withStyle
import kotlinx.coroutines.launch
import chaos.alice.pro.ui.theme.ItalicMessageColor


@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)
@Composable
fun ChatScreen(
    navController: NavController,
    viewModel: ChatViewModel = hiltViewModel()
) {
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()
    val listState = rememberLazyListState()
    val coroutineScope = rememberCoroutineScope()

    // –ê–≤—Ç–æ-–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    LaunchedEffect(uiState.messages.size) {
        if (uiState.messages.isNotEmpty()) {
            coroutineScope.launch {
                listState.animateScrollToItem(uiState.messages.size - 1)
            }
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        text = uiState.chatTitle,
                        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ –¥–∏–∞–ª–æ–≥–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
                        modifier = Modifier.combinedClickable(
                            onClick = {},
                            onLongClick = { viewModel.onRenameRequest() }
                        )
                    )
                },
                navigationIcon = {
                    IconButton(onClick = { navController.navigateUp() }) {
                        Icon(
                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                            contentDescription = "–ù–∞–∑–∞–¥"
                        )
                    }
                },
                actions = {
                    // –ê–≤–∞—Ç–∞—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Ç—É–ª–±–∞—Ä–µ
                    uiState.currentPersona?.let { persona ->
                        AsyncImage(
                            model = persona.icon_url,
                            contentDescription = persona.name,
                            modifier = Modifier
                                .padding(end = 8.dp)
                                .size(40.dp)
                                .clip(CircleShape),
                            contentScale = ContentScale.Crop
                        )
                    }
                }
            )
        },
        bottomBar = {
            MessageInput(
                onSendMessage = { text -> viewModel.sendMessage(text) },
                isLoading = uiState.isLoading
            )
        }
    ) { paddingValues ->
        Box(modifier = Modifier.fillMaxSize().padding(paddingValues)) {
            LazyColumn(
                state = listState,
                modifier = Modifier
                    .fillMaxSize()
                    .padding(horizontal = 8.dp),
                contentPadding = PaddingValues(vertical = 16.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                items(uiState.messages) { message ->
                    MessageBubble(message = message)
                }
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (uiState.showRenameDialog) {
                RenameChatDialog(
                    currentTitle = uiState.chatTitle,
                    onConfirm = { newTitle -> viewModel.onRenameConfirm(newTitle) },
                    onDismiss = { viewModel.onRenameDialogDismiss() }
                )
            }
        }
    }
}

@Composable
fun SimpleMarkdownText(
    text: String,
    modifier: Modifier = Modifier,
    defaultColor: Color // –≠—Ç–æ—Ç —Ü–≤–µ—Ç –±—É–¥–µ—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
) {
    val codeBlockBackgroundColor = MaterialTheme.colorScheme.surfaceVariant
    val markdownRegex = remember { Regex("""(\*\*.*?\*\*|\*.*?\*|`.*?`)""") }

    val annotatedString = buildAnnotatedString {
        var lastIndex = 0
        markdownRegex.findAll(text).forEach { match ->
            val startIndex = match.range.first
            val matchedText = match.value

            // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ —Ä–∞–∑–º–µ—Ç–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º defaultColor
            if (startIndex > lastIndex) {
                withStyle(style = SpanStyle(color = defaultColor)) {
                    append(text.substring(lastIndex, startIndex))
                }
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
            when {
                matchedText.startsWith("**") -> {
                    // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º defaultColor
                    withStyle(style = SpanStyle(fontWeight = FontWeight.Bold, color = defaultColor)) {
                        append(matchedText.removeSurrounding("**"))
                    }
                }

                // üëá –í–û–¢ –ó–î–ï–°–¨ –ò–ó–ú–ï–ù–ï–ù–ò–ï
                matchedText.startsWith("*") -> {
                    // –ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º ItalicMessageColor
                    withStyle(style = SpanStyle(fontStyle = FontStyle.Italic, color = ItalicMessageColor)) {
                        append(matchedText.removeSurrounding("*"))
                    }
                }

                matchedText.startsWith("`") -> {
                    // –ö–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º defaultColor
                    withStyle(
                        style = SpanStyle(
                            fontFamily = FontFamily.Monospace,
                            background = codeBlockBackgroundColor,
                            color = defaultColor
                        )
                    ) {
                        append(matchedText.removeSurrounding("`"))
                    }
                }
            }
            lastIndex = match.range.last + 1
        }

        // –û—Å—Ç–∞–≤—à–∏–π—Å—è –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—Ç–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º defaultColor
        if (lastIndex < text.length) {
            withStyle(style = SpanStyle(color = defaultColor)) {
                append(text.substring(lastIndex))
            }
        }
    }

    Text(
        text = annotatedString,
        modifier = modifier
    )
}

@Composable
fun MessageBubble(message: MessageEntity) {
    val isUser = message.sender == Sender.USER
    val alignment = if (isUser) Alignment.CenterEnd else Alignment.CenterStart
    val bubbleColor = when {
        message.isError -> MaterialTheme.colorScheme.errorContainer
        isUser -> MaterialTheme.colorScheme.primaryContainer
        else -> MaterialTheme.colorScheme.secondaryContainer
    }
    val textColor = when {
        message.isError -> MaterialTheme.colorScheme.onErrorContainer
        isUser -> MaterialTheme.colorScheme.onPrimaryContainer
        else -> MaterialTheme.colorScheme.onSecondaryContainer
    }

    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = alignment) {
        Surface(
            shape = RoundedCornerShape(16.dp),
            color = bubbleColor,
            modifier = Modifier.widthIn(max = 300.dp)
        ) {
            // üëá –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï - –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–ê–® –ö–û–ú–ü–û–ù–ï–ù–¢
            if (message.sender == Sender.MODEL && !message.isError) {
                SimpleMarkdownText(
                    text = message.text,
                    modifier = Modifier.padding(12.dp),
                    defaultColor = textColor
                )
            } else {
                Text(
                    text = message.text,
                    color = textColor,
                    modifier = Modifier.padding(12.dp)
                )
            }
        }
    }
}

@Composable
fun MessageInput(onSendMessage: (String) -> Unit, isLoading: Boolean) {
    var text by remember { mutableStateOf("") }

    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp)
    ) {
        Row(
            modifier = Modifier.padding(horizontal = 8.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            TextField(
                value = text,
                onValueChange = { text = it },
                modifier = Modifier.weight(1f),
                placeholder = { Text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...") },
                colors = TextFieldDefaults.colors(
                    focusedIndicatorColor = Color.Transparent,
                    unfocusedIndicatorColor = Color.Transparent,
                    disabledIndicatorColor = Color.Transparent,
                    focusedContainerColor = Color.Transparent,
                    unfocusedContainerColor = Color.Transparent,
                ),
                enabled = !isLoading
            )
            if (isLoading) {
                CircularProgressIndicator(modifier = Modifier.size(24.dp))
            } else {
                IconButton(onClick = {
                    onSendMessage(text)
                    text = ""
                }, enabled = text.isNotBlank()) {
                    Icon(Icons.AutoMirrored.Filled.Send, contentDescription = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
                }
            }
        }
    }
}

@Composable
fun RenameChatDialog(
    currentTitle: String,
    onConfirm: (String) -> Unit,
    onDismiss: () -> Unit
) {
    var newTitle by remember(currentTitle) { mutableStateOf(currentTitle) }

    AlertDialog(
        onDismissRequest = onDismiss,
        title = { Text("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —á–∞—Ç") },
        text = {
            OutlinedTextField(
                value = newTitle,
                onValueChange = { newTitle = it },
                label = { Text("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ") },
                singleLine = true
            )
        },
        confirmButton = {
            TextButton(onClick = { onConfirm(newTitle) }) {
                Text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
            }
        },
        dismissButton = {
            TextButton(onClick = onDismiss) {
                Text("–û—Ç–º–µ–Ω–∞")
            }
        }
    )
}