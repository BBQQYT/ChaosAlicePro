package chaos.alice.pro.ui.settings

import android.widget.Toast
import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.navigation.NavController

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SettingsScreen(
    navController: NavController,
    viewModel: SettingsViewModel = hiltViewModel()
) {
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()
    val context = LocalContext.current
    var isProviderDropdownExpanded by remember { mutableStateOf(false) }
    var isModelDropdownExpanded by remember { mutableStateOf(false) }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API") },
                navigationIcon = {
                    IconButton(onClick = { navController.navigateUp() }) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "–ù–∞–∑–∞–¥")
                    }
                }
            )
        }
    ) { paddingValues ->
        if (uiState.isLoading) {
            Box(modifier = Modifier.fillMaxSize(), contentAlignment = androidx.compose.ui.Alignment.Center) {
                CircularProgressIndicator()
            }
        } else {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(paddingValues)
                    .padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                // –í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                Text("–ü—Ä–æ–≤–∞–π–¥–µ—Ä", style = MaterialTheme.typography.titleMedium)
                ExposedDropdownMenuBox(
                    expanded = isProviderDropdownExpanded,
                    onExpandedChange = { isProviderDropdownExpanded = !isProviderDropdownExpanded }
                ) {
                    OutlinedTextField(
                        modifier = Modifier.fillMaxWidth().menuAnchor(),
                        readOnly = true,
                        value = uiState.selectedProvider.displayName,
                        onValueChange = {},
                        trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = isProviderDropdownExpanded) }
                    )
                    ExposedDropdownMenu(
                        expanded = isProviderDropdownExpanded,
                        onDismissRequest = { isProviderDropdownExpanded = false }
                    ) {
                        uiState.availableProviders.forEach { provider ->
                            DropdownMenuItem(
                                text = { Text(provider.displayName) },
                                onClick = {
                                    viewModel.onProviderSelected(provider)
                                    isProviderDropdownExpanded = false
                                }
                            )
                        }
                    }
                }

                Text("API –∫–ª—é—á", style = MaterialTheme.typography.titleMedium)
                OutlinedTextField(
                    value = uiState.apiKey,
                    onValueChange = { viewModel.onApiKeyChanged(it) },
                    modifier = Modifier.fillMaxWidth(),
                    label = { Text("–í–∞—à API –∫–ª—é—á") },
                    singleLine = true
                )

                // üëáüëáüëá –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –í–´–ë–û–†–ê –ú–û–î–ï–õ–ò üëáüëáüëá
                Text("–ú–æ–¥–µ–ª—å", style = MaterialTheme.typography.titleMedium)
                ExposedDropdownMenuBox(
                    expanded = isModelDropdownExpanded,
                    onExpandedChange = { isModelDropdownExpanded = !isModelDropdownExpanded }
                ) {
                    // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    OutlinedTextField(
                        value = uiState.modelName,
                        onValueChange = { viewModel.onModelNameChanged(it) },
                        modifier = Modifier.fillMaxWidth().menuAnchor(),
                        label = { Text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ–ª–∏") },
                        trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = isModelDropdownExpanded) },
                        singleLine = true
                    )

                    // –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é —Å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
                    ExposedDropdownMenu(
                        expanded = isModelDropdownExpanded,
                        onDismissRequest = { isModelDropdownExpanded = false }
                    ) {
                        // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                        if (uiState.availableModelsForProvider.isEmpty()) {
                            DropdownMenuItem(
                                text = { Text("–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π") },
                                onClick = {},
                                enabled = false
                            )
                        }

                        uiState.availableModelsForProvider.forEach { modelName ->
                            DropdownMenuItem(
                                text = { Text(modelName) },
                                onClick = {
                                    viewModel.onModelNameChanged(modelName)
                                    isModelDropdownExpanded = false
                                }
                            )
                        }
                    }
                }

                Spacer(modifier = Modifier.weight(1f))

                Button(
                    onClick = {
                        viewModel.saveSettings()
                        Toast.makeText(context, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", Toast.LENGTH_SHORT).show()
                        navController.navigateUp()
                    },
                    modifier = Modifier.fillMaxWidth(),
                    enabled = uiState.apiKey.isNotBlank() && uiState.modelName.isNotBlank()
                ) {
                    Text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
                }
            }
        }
    }
}