package chaos.alice.pro.data

import android.util.Log
import chaos.alice.pro.data.local.ChatDao
import chaos.alice.pro.data.local.ChatEntity
import chaos.alice.pro.data.local.MessageEntity
import chaos.alice.pro.data.local.Sender
import chaos.alice.pro.data.network.llm.LlmProviderFactory
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.first
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class ChatRepository @Inject constructor(
    private val chatDao: ChatDao,
    private val tokenManager: TokenManager,
    private val personaRepository: PersonaRepository,
    private val llmProviderFactory: LlmProviderFactory // üëà –í–Ω–µ–¥—Ä—è–µ–º –Ω–∞—à—É —Ñ–∞–±—Ä–∏–∫—É
) {

    // --- –ú–µ—Ç–æ–¥—ã getAllChats, getChat, createNewChat, updateChatTitle, deleteChat –æ—Å—Ç–∞—é—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    fun getAllChats(): Flow<List<ChatEntity>> = chatDao.getAllChats()
    fun getChat(chatId: Long): Flow<ChatEntity?> = chatDao.getChatFlow(chatId)
    suspend fun createNewChat(chat: ChatEntity): Long = chatDao.insertChat(chat)
    suspend fun updateChatTitle(chatId: Long, newTitle: String) = chatDao.updateChatTitle(chatId, newTitle)
    suspend fun deleteChat(chatId: Long) = chatDao.deleteChatAndMessages(chatId)
    // ---

    fun getChatHistory(chatId: Long): Flow<List<MessageEntity>> {
        return chatDao.getMessagesForChat(chatId)
    }

    suspend fun sendMessage(chatId: Long, text: String) {
        val userMessage = MessageEntity(
            chatId = chatId, text = text, sender = Sender.USER, timestamp = System.currentTimeMillis()
        )
        chatDao.insertMessage(userMessage)

        try {
            // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
            val chat = chatDao.getChatById(chatId) ?: throw Exception("Chat not found")
            val persona = personaRepository.getPersonaById(chat.personaId)
            val apiKey = tokenManager.getToken().first() ?: throw IllegalStateException("API Key not found!")
            val apiProviderType = tokenManager.getProvider().first()
            val modelName = tokenManager.getModelName().first() // <-- –ü–û–õ–£–ß–ê–ï–ú –ú–û–î–ï–õ–¨
            val history = chatDao.getMessagesForChat(chatId).first().dropLast(1)

            // 2. –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–π LlmProvider –∏–∑ —Ñ–∞–±—Ä–∏–∫–∏
            val llmProvider = llmProviderFactory.getProvider(apiProviderType)

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –º–æ–¥–µ–ª—å –≤ userMessage
            userMessage.apiProvider = apiProviderType
            userMessage.modelName = modelName // <-- –ü–ï–†–ï–î–ê–ï–ú –ú–û–î–ï–õ–¨

            // 3. –í—ã–∑—ã–≤–∞–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            val modelResponseText = llmProvider.generateResponse(
                apiKey = apiKey,
                systemPrompt = persona?.prompt,
                history = history,
                userMessage = userMessage
            )

            // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
            val modelMessage = MessageEntity(
                chatId = chatId, text = modelResponseText, sender = Sender.MODEL, timestamp = System.currentTimeMillis()
            )
            chatDao.insertMessage(modelMessage)

            // 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
            if (chatDao.getMessagesForChat(chatId).first().size <= 2) {
                generateAndSetChatTitle(chatId) // –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            }

        } catch (e: Exception) {
            Log.e("ChatRepository", "Error sending message", e)
            val errorMessage = MessageEntity(
                chatId = chatId, text = "–û—à–∏–±–∫–∞: ${e.message}", sender = Sender.MODEL, timestamp = System.currentTimeMillis(), isError = true
            )
            chatDao.insertMessage(errorMessage)
        }
    }

    // --- –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–æ–∂–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å ---
    private suspend fun generateAndSetChatTitle(chatId: Long) {
        try {
            val apiKey = tokenManager.getToken().first() ?: return
            val apiProviderType = tokenManager.getProvider().first()
            val llmProvider = llmProviderFactory.getProvider(apiProviderType)

            val history = getChatHistory(chatId).first()
            val conversationText = history.joinToString("\n") { "${it.sender}: ${it.text}" }

            val summarizationPrompt = """
                Summarize the following conversation with a short, descriptive title (3-5 words). The title should be in Russian.
                Conversation:
                $conversationText
                Title:
            """.trimIndent()

            // üëáüëáüëá –í–û–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï üëáüëáüëá

            // 1. –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            val titlePromptMessage = MessageEntity(
                chatId = 0, // –ù–µ –≤–∞–∂–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                text = summarizationPrompt,
                sender = Sender.USER,
                timestamp = 0
            )

            // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            titlePromptMessage.apiProvider = apiProviderType

            // 3. –ü–µ—Ä–µ–¥–∞–µ–º –≥–æ—Ç–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –º–µ—Ç–æ–¥
            val titleResponse = llmProvider.generateResponse(
                apiKey = apiKey,
                systemPrompt = null, // –î–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω—É–∂–µ–Ω
                history = emptyList(),
                userMessage = titlePromptMessage // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            )

            val newTitle = titleResponse.trim().removeSurrounding("\"")
            if (newTitle.isNotBlank()) {
                chatDao.updateChatTitle(chatId, newTitle)
            }
        } catch (e: Exception) {
            Log.e("ChatRepository", "Failed to generate chat title", e)
        }
    }
}